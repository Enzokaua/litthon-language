# Generated from gramaticLitthon.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,269,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,5,0,56,8,0,10,0,12,0,59,9,0,1,1,3,1,62,8,1,1,1,4,1,65,8,1,
        11,1,12,1,66,1,1,1,1,4,1,71,8,1,11,1,12,1,72,3,1,75,8,1,1,2,1,2,
        5,2,79,8,2,10,2,12,2,82,9,2,1,3,1,3,1,3,1,3,5,3,88,8,3,10,3,12,3,
        91,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,3,9,172,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,247,
        8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,256,8,24,10,24,12,24,
        259,9,24,1,24,1,24,1,25,4,25,264,8,25,11,25,12,25,265,1,25,1,25,
        0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,1,0,8,1,0,65,90,4,0,48,57,65,90,95,95,97,122,1,
        0,48,57,2,0,65,90,97,122,3,0,48,57,65,90,97,122,2,0,34,34,92,92,
        2,0,10,10,13,13,3,0,9,10,13,13,32,32,284,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,
        61,1,0,0,0,5,76,1,0,0,0,7,83,1,0,0,0,9,94,1,0,0,0,11,108,1,0,0,0,
        13,119,1,0,0,0,15,129,1,0,0,0,17,143,1,0,0,0,19,171,1,0,0,0,21,173,
        1,0,0,0,23,177,1,0,0,0,25,181,1,0,0,0,27,185,1,0,0,0,29,188,1,0,
        0,0,31,191,1,0,0,0,33,195,1,0,0,0,35,199,1,0,0,0,37,203,1,0,0,0,
        39,207,1,0,0,0,41,211,1,0,0,0,43,215,1,0,0,0,45,219,1,0,0,0,47,246,
        1,0,0,0,49,248,1,0,0,0,51,263,1,0,0,0,53,57,7,0,0,0,54,56,7,1,0,
        0,55,54,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,2,1,
        0,0,0,59,57,1,0,0,0,60,62,5,45,0,0,61,60,1,0,0,0,61,62,1,0,0,0,62,
        64,1,0,0,0,63,65,7,2,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,
        0,66,67,1,0,0,0,67,74,1,0,0,0,68,70,5,46,0,0,69,71,7,2,0,0,70,69,
        1,0,0,0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,
        74,68,1,0,0,0,74,75,1,0,0,0,75,4,1,0,0,0,76,80,7,3,0,0,77,79,7,4,
        0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,6,
        1,0,0,0,82,80,1,0,0,0,83,89,5,34,0,0,84,85,5,92,0,0,85,88,9,0,0,
        0,86,88,8,5,0,0,87,84,1,0,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,
        1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,34,0,0,
        93,8,1,0,0,0,94,95,5,60,0,0,95,96,5,76,0,0,96,97,5,58,0,0,97,98,
        5,79,0,0,98,99,5,58,0,0,99,100,5,71,0,0,100,101,5,58,0,0,101,102,
        5,76,0,0,102,103,5,58,0,0,103,104,5,79,0,0,104,105,5,58,0,0,105,
        106,5,71,0,0,106,107,5,62,0,0,107,10,1,0,0,0,108,109,5,60,0,0,109,
        110,5,67,0,0,110,111,5,58,0,0,111,112,5,65,0,0,112,113,5,58,0,0,
        113,114,5,83,0,0,114,115,5,58,0,0,115,116,5,69,0,0,116,117,5,58,
        0,0,117,118,5,62,0,0,118,12,1,0,0,0,119,120,5,60,0,0,120,121,5,69,
        0,0,121,122,5,58,0,0,122,123,5,76,0,0,123,124,5,58,0,0,124,125,5,
        83,0,0,125,126,5,58,0,0,126,127,5,69,0,0,127,128,5,62,0,0,128,14,
        1,0,0,0,129,130,5,60,0,0,130,131,5,87,0,0,131,132,5,58,0,0,132,133,
        5,72,0,0,133,134,5,58,0,0,134,135,5,73,0,0,135,136,5,58,0,0,136,
        137,5,76,0,0,137,138,5,58,0,0,138,139,5,83,0,0,139,140,5,58,0,0,
        140,141,5,84,0,0,141,142,5,62,0,0,142,16,1,0,0,0,143,144,5,123,0,
        0,144,145,5,76,0,0,145,146,5,58,0,0,146,147,5,69,0,0,147,148,5,58,
        0,0,148,149,5,78,0,0,149,150,5,58,0,0,150,151,5,71,0,0,151,152,5,
        58,0,0,152,153,5,72,0,0,153,154,5,58,0,0,154,155,5,84,0,0,155,156,
        5,62,0,0,156,157,5,47,0,0,157,18,1,0,0,0,158,159,5,60,0,0,159,160,
        5,84,0,0,160,161,5,82,0,0,161,162,5,85,0,0,162,163,5,69,0,0,163,
        172,5,62,0,0,164,165,5,60,0,0,165,166,5,70,0,0,166,167,5,65,0,0,
        167,168,5,76,0,0,168,169,5,83,0,0,169,170,5,69,0,0,170,172,5,62,
        0,0,171,158,1,0,0,0,171,164,1,0,0,0,172,20,1,0,0,0,173,174,5,60,
        0,0,174,175,5,63,0,0,175,176,5,62,0,0,176,22,1,0,0,0,177,178,5,60,
        0,0,178,179,5,123,0,0,179,180,5,62,0,0,180,24,1,0,0,0,181,182,5,
        60,0,0,182,183,5,125,0,0,183,184,5,62,0,0,184,26,1,0,0,0,185,186,
        5,60,0,0,186,187,5,123,0,0,187,28,1,0,0,0,188,189,5,125,0,0,189,
        190,5,62,0,0,190,30,1,0,0,0,191,192,5,60,0,0,192,193,5,123,0,0,193,
        194,5,47,0,0,194,32,1,0,0,0,195,196,5,60,0,0,196,197,5,123,0,0,197,
        198,5,43,0,0,198,34,1,0,0,0,199,200,5,123,0,0,200,201,5,43,0,0,201,
        202,5,125,0,0,202,36,1,0,0,0,203,204,5,123,0,0,204,205,5,45,0,0,
        205,206,5,125,0,0,206,38,1,0,0,0,207,208,5,123,0,0,208,209,5,47,
        0,0,209,210,5,125,0,0,210,40,1,0,0,0,211,212,5,123,0,0,212,213,5,
        42,0,0,213,214,5,125,0,0,214,42,1,0,0,0,215,216,5,123,0,0,216,217,
        5,94,0,0,217,218,5,125,0,0,218,44,1,0,0,0,219,220,5,58,0,0,220,221,
        5,60,0,0,221,222,5,45,0,0,222,223,5,58,0,0,223,46,1,0,0,0,224,225,
        5,58,0,0,225,226,5,61,0,0,226,227,5,61,0,0,227,247,5,58,0,0,228,
        229,5,58,0,0,229,230,5,33,0,0,230,231,5,61,0,0,231,247,5,58,0,0,
        232,233,5,58,0,0,233,234,5,62,0,0,234,247,5,58,0,0,235,236,5,58,
        0,0,236,237,5,60,0,0,237,247,5,58,0,0,238,239,5,58,0,0,239,240,5,
        62,0,0,240,241,5,61,0,0,241,247,5,58,0,0,242,243,5,58,0,0,243,244,
        5,60,0,0,244,245,5,61,0,0,245,247,5,58,0,0,246,224,1,0,0,0,246,228,
        1,0,0,0,246,232,1,0,0,0,246,235,1,0,0,0,246,238,1,0,0,0,246,242,
        1,0,0,0,247,48,1,0,0,0,248,249,5,60,0,0,249,250,5,35,0,0,250,251,
        5,35,0,0,251,252,5,35,0,0,252,253,5,62,0,0,253,257,1,0,0,0,254,256,
        8,6,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,
        1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,6,24,0,0,261,50,
        1,0,0,0,262,264,7,7,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,263,
        1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,6,25,0,0,268,52,
        1,0,0,0,13,0,57,61,66,72,74,80,87,89,171,246,257,265,1,6,0,0
    ]

class gramaticLitthonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROCEDURESREGEX = 1
    NUMBERSREGEX = 2
    VARREGEX = 3
    STRINGREGEX = 4
    SYSTEMOUTTOKEN = 5
    CONDITIONTOKEN = 6
    ELSECONDITIONTOKEN = 7
    WHILETOKEN = 8
    ARRSIZETOKEN = 9
    BOOLTOKEN = 10
    SYSTEMINTOKEN = 11
    LBTOKEN = 12
    RBTOKEN = 13
    ARRTOKENLEFTTOKEN = 14
    ARRTOKENRIGHTTOKEN = 15
    ARRREMOVEDINDEXTOKEN = 16
    ARRADDINDEXTOKEN = 17
    PLUSTOKEN = 18
    LESSTOKEN = 19
    DIVISIONTOKEN = 20
    MULTTOKEN = 21
    POTTOKEN = 22
    ASSIGNTOKEN = 23
    COMPARETOKEN = 24
    COMMENTTOKEN = 25
    WS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<L:O:G:L:O:G>'", "'<C:A:S:E:>'", "'<E:L:S:E>'", "'<W:H:I:L:S:T>'", 
            "'{L:E:N:G:H:T>/'", "'<?>'", "'<{>'", "'<}>'", "'<{'", "'}>'", 
            "'<{/'", "'<{+'", "'{+}'", "'{-}'", "'{/}'", "'{*}'", "'{^}'", 
            "':<-:'" ]

    symbolicNames = [ "<INVALID>",
            "PROCEDURESREGEX", "NUMBERSREGEX", "VARREGEX", "STRINGREGEX", 
            "SYSTEMOUTTOKEN", "CONDITIONTOKEN", "ELSECONDITIONTOKEN", "WHILETOKEN", 
            "ARRSIZETOKEN", "BOOLTOKEN", "SYSTEMINTOKEN", "LBTOKEN", "RBTOKEN", 
            "ARRTOKENLEFTTOKEN", "ARRTOKENRIGHTTOKEN", "ARRREMOVEDINDEXTOKEN", 
            "ARRADDINDEXTOKEN", "PLUSTOKEN", "LESSTOKEN", "DIVISIONTOKEN", 
            "MULTTOKEN", "POTTOKEN", "ASSIGNTOKEN", "COMPARETOKEN", "COMMENTTOKEN", 
            "WS" ]

    ruleNames = [ "PROCEDURESREGEX", "NUMBERSREGEX", "VARREGEX", "STRINGREGEX", 
                  "SYSTEMOUTTOKEN", "CONDITIONTOKEN", "ELSECONDITIONTOKEN", 
                  "WHILETOKEN", "ARRSIZETOKEN", "BOOLTOKEN", "SYSTEMINTOKEN", 
                  "LBTOKEN", "RBTOKEN", "ARRTOKENLEFTTOKEN", "ARRTOKENRIGHTTOKEN", 
                  "ARRREMOVEDINDEXTOKEN", "ARRADDINDEXTOKEN", "PLUSTOKEN", 
                  "LESSTOKEN", "DIVISIONTOKEN", "MULTTOKEN", "POTTOKEN", 
                  "ASSIGNTOKEN", "COMPARETOKEN", "COMMENTTOKEN", "WS" ]

    grammarFileName = "gramaticLitthon.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


